{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","_ref","title","cases","total","active","isRed","props","console","log","React","createElement","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","setData","useState","useEffect","async","fetch","then","response","json","chartData","buildChartData","lastDataPoint","date","newDataPoint","x","y","push","fetchData","length","Line","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","Map","center","zoom","LeafletMap","TileLayer","url","attribution","arguments","undefined","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","mapCenter","setMapCenter","lng","mapZoom","setMapZoom","name","iso2","sortedData","sort","a","b","sortData","getCountriesData","FormControl","Select","variant","onChange","countryCode","e","target","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4e59bcd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}